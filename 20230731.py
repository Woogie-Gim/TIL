# 알고리즘
# (명) 알고리즘 : 유한한 단계를 통해 문제를 해결하기 위한 절차나 방법이다.
# 주로 컴퓨터 용어로 쓰이며, 컴퓨터가 어떤일을 수행하기 위한 단계적 방법을 말한다
# 간단하게 다시 말하면 어떠한 문제를 해결하기 위한 절차라고 볼 수 있다

# 무엇이 좋은 알고리즘인가?
# 1. 정확성 : 얼마나 정확하게 동작하는가
# 2. 작업량 : 얼마나 적은 연산으로 원하는 결과를 얻어내는가
# 3. 메모리 사용량 : 얼마나 적은 메모리를 사용하는가
# 4. 단순성 : 얼마나 단순한가
# 5. 최적성 : 더 이상 개선할 여지없이 최적화 되었는가

# 주어진 문제를 해결하기 위해 여러 개의 다양한 알고리즘이 가능

# 알고리즘의 성능 분석 필요
# 많은 문제에서 '성능 분석'의 기준으로 알고리즘의 작업량을 비교한다.

# 알고리즘은 작얼뱡을 표현할 때 시간복잡도로 표현한다.

# 시간 복잡도 (Time Complexity)
# 실제 걸리는 시간을 측정
# 실행되는 명령문의 개수를 계산

# 시간 복잡도 ≒ 빅오(O) 표기법
# 빅-오 표기법 (Bog-Oh Notation)
# 시간 복잡도 함수 중에서 가장 큰 영향력을 주는 n에 대한 항만을 표시
# 계수(Confficient)는 생략하여 표시

# 예를 들어
# O(3n + 2) = O(3n) = O(n) / 최고차항만 선택 계수 없이 표기

# 배열이란 무엇인가
# 일정한 자료형의 변수들을 하나의 이름으로 열거하여 사용하는 자료구조
# 인덱스에 접근할 수 있는 저장 방식을 모두 배열이라고 한다.

# 배열의 필요성
# 프로그램 내에서 여러 개의 변수가 필요할 때, 일일이 다른 변수명을 이용하여 자료에 접근하는 것은 매우 비효율적
# 배열을 사용하면 하나의 선언을 통해서 둘 이상의 변수를 선언할 수 있다
# 단순히 다수의 변수 선언을 의미하는 것이 아니라, 다수의 변수로는 하기 힘든 작업을 배열을 활용해 쉽게 할 수 있다

# 1차원 배열
# 1차원 배열의 선언
# 별도의 선언 방법이 없으면 변수에 처음 값을 할당할 때 생성
# arr = list(), arr = [] arr = [0] * 10

# 1차원 배열의 접근
# arr[0] = 10
# arr[index] = 20

# 배열 활용 예제 : Gravity
# 상자들이 쌓여있는 방이있다.
# 방이 오른쪽으로 90도 회전하여 상자들이 중력의 영향을 받아 낙하한다고 할 때,
# 낙차가 가장 큰 상자를 구하여 그 낙차를 출력하여 보자.

"""
9
7 4 2 0 0 6 0 7 0
"""

N = int(input())
arr = list(map(int, input().split()))

# 한번에 처리 하는 것을 test case

# SWEA 4828 MIN MAX 문제
T = int(input()) # 테스트케이스 개수

for tc in range(1, T+1):
    N = int(input())
    arr = list(map(int, input().split())) #split() 빈칸을 기준으로 나눔 / ()안의 값을 기준으로 나눔
    max_value = arr[0]
    min_value = arr[0]

    for i in range(1, N):
        if max_value < arr[i]:
            max_value = arr[i]
        if min_value > arr[i]:
            min_value = arr[i]

    ans = abs(max_value - min_value)

    print(f'#{tc} {ans}')

# 정렬
# 2개 이상의 자료를 특정 기준에 의해 작은 값부터 큰 값(오름차순 : ascending),
# 혹은 그 반대의 순서대로 (내림차순 : descending) 재배열하는 것


# 대표적인 정렬 방식의 종류
# 버블 벙렬 (Bubble Sort)
# 카운팅 정렬 (Counting Sort)
# 선택 정렬 (Selection Sort)
# 퀵 정렬 (Quick Sort)
# 삽입 정렬 (Insertion Sort)
# 병합 정렬 (Merge Sort)

# 버블 정렬 (Bubble Sort)
# 인접한 두 개의 원소를 비교하며 자리를 계속 교환하는 방식

# 정렬 과정
# 첫 번째 원소부터 인접한 원소끼리 계속 자리를 교환하면서 맨 마지막 자리까지 이동한다
# 한 단계가 끝나면 가장 큰 원소가 마지막 자리로 정렬된다.
# 교환하며 자리를 이동하는 모습이 물 위에 올라오는 거품 모양과 같다고 하여 버블 정렬이라고 한다.

# 시간 복잡도
# O(n^2)

def BubbleSort(a, N): # 정렬할 List, N 원소 수
    for i in range(N-1, 0, -1): #범위 끝까지
        for j in range(0, i):
            if a[j] > a[j+1]:
                a[j], a[j+1] = a[j+1], a[j]


# SWEA 1966. 숫자를 정렬하자 / Bubble Sort 사용

T = int(input())
for tc in range(1, T+1):
    N = int(input())
    arr = list(map(int, input().split()))

    for i in range(N-1, 0, -1):
        for j in range(i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

    print(f'#{tc}', *arr)