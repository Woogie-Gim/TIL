# 부분집합 합(Subset Sum) 문제

# 유한 개의 정수로 이루어진 집합이 있을 때, 이 집합의 부분집합 중에서 그 집합으 원소를 모두 더한 값이
# 0이 되는 경우가 있는지를 알아내는 문제

# 예를 들어, [-7, -3, -2, 5, 8] 라는 집합이 있을 때, [-3, -2, 5]는 이 집합의
# 부분집합 이면서 (-3) + (-2) + 5 = 0 이므로 이 경우의 답은 참이 된다.

# "완전검색" 기법으로 부분집합 합 문제를 풀기 위해서는, 우선 집합의 모든 부분집합을 생성한 후에
# 각 부분집합의 합을 계산해야 한다.

# 주어진 집합의 부분집합을 생성하는 방법에 대해서 생각해보자.

"""
1, 2, 3
{}
{1} {2} {3}
{1, 2} {2, 3} {1, 3}
{1, 2, 3}
"""

# 부분집합의 수
# 집합의 원소가 n개일 때, 공집합을 포함한 부분집합의 수는 2^n개이다.
# 이는 각 원소를 부분집합에 포함시키거나 포함시키지 않는 2가지 경우를 모든 원소에 적용한 경우의 수와 같다

# 예)
# {1, 2, 3, 4}
# 2 * 2 * 2 * 2 = 16가지
# 1 -> 포함 / 미포함 1 / 0
# 포함 / 미포함 여부를 또 다른 숫자로 표현할 수 있을 것이다


# 각 원소가 부분집합에 포함되었는지를 loop 이용하여 확인하고 부분집합을 생성하는 방법

def print_subset(bit, arr, n):
    total = 0 # 부분집합의 합
    for i in range(n):
        if bit[i]:
            print(arr[i], end = ' ')
            total += arr[i]
    print(bit, total)

arr = [1, 2, 3, 4]
bit = [0, 0, 0, 0]

for i in range(2):
    bit[0] = i
    for j in range(2):
        bit[1] = j
        for k in range(2):
            bit[2] = k
            for l in range(2):
                bit[3] = l
                print_subset(bit, arr, 4)

# 비트 연산자
# 비트 : 1/0 로 저장되는 자리 / 메모리 주소는 bit 8개로 이루어진 byte 최소단위로 저장 된다
# & : 비트 단위로 AND 연산을 한다
# | : 비트 단위로 OR 연산을 한다
# << : 피연산자의 비트 열을 왼쪽으로 이동시킨다
# >> : 피연산자의 비트 열을 오른쪽으로 이동시킨다.

"""
a
b
b3 / b2 / b1 / b0
비트 단위로 연산을 할 경우 각 자리에 있는 같은 번호의 비트 끼리만 연산만 가능

AND 둘 다 1이여야 1이 되는 연산

OR 하나라도 1이라면 1이 되는 연산
0 0 / 0 
0 1 / 1
1 0 / 1
1 1 / 1

<< : 각각의 자리를 왼쪽으로 이동
a << 4 왼쪽으로 4칸 이동 / 밀려간 그 자리는 0이 채워짐
"""
# << 연산자
# 1 << n :2^n 즉, 원소가 n개일 경우의 모든 부분집합의 수를 의미한다

# & 연산자
# i & (1<<j) : i의 j번째 비트가 1인지 아닌지를 검사한다.
# 0 -> False / 1 -> True
# 그 연산의 값이 True 라면 j번 원소는 부분집합에 포함된 것이다

# 부분집합의 0과 1을 표현했을 때 bit 연산과 같아진다
# 부분집합을 만들 때 자리수가 고정적이지 않고 유동적일 수도 있기 때문에

arr = [1, 2, 3]

n = len(arr)  # n : 원소의 개수

for i in range(1 << n): # 1 << n : 부분 집합의 개수
    for j in range(n):  # 원소의 수만큼 비트를 비교함
        if i & (1 << j):    # i의 j번 비트가 1인 경우
            print(arr[j], end= ", ")    # j번 원소 출력
    print()
print()

"""
[1, 2, 3]
0 0 0
0 0 1
0 1 0
0 1 1
1 0 0
1 0 1
1 1 0
1 1 1
8 가지 -> 0 ~ 7 -> 2 ** 3

각각의 비트가 포함 여부를 알 수 있게 비트연산으로 결정했기 때문에
부분집합을 표현할 수 있다
"""

# 검색 (Search)

# 저장되어 있는 자료 중에서 원하는 항목을 찾는 작업
# 목적하는 탐색 키를 가진 항목을 찾는 것
# 탐색 키 (search key) : 자료를 구별하여 인식할 수 있는 키

# 검색의 종류
# 순차 검색
# 이진 검색
# 해쉬

# 순차 검색 (Sequential Search)
# 일렬로 되어 있는 자료를 순서대로 검색하는 방법
# 가장 간단하고 직관적인 검색 방법
# 배열이나 연결 리스트 등 순차구조로 구현된 자료구조에서 원하는 항목을 찾을 때 유용함
# 알고리즘이 단순하여 구현이 쉽지만, 검색 대상의 수가 많은 경우에는 수행시간이 급격히 증가하여 비효율적임
# 100만개 순차검색 힘듦

# 2가지 경우
# 정렬되어 있지 않은 경우
# 정렬되어 있는 경우

# 정렬되어 있지 않은 경우
# 검색 과정
# 첫 번째 원소부터 순서대로 검색 대상과 키 값이 같은 원소가 있는지 비교하며 찾는다
# 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환한다
# 자료구조의 마지막에 이를 때까지 검색 대상을 찾지 못하면 검색 실패

"""
5 7 2 4 3
찾아서 인덱스를 리턴해라
못찾아도 끝까지 가라
"""

# 찾고자 하는 원소의 순서에 따라 비교회수가 결정됨
# 첫 번째 원소를 찾을 때는 1번 비교, 두 번째 원소를 찾을 때는 2번 비교...
# 정렬되지 않은 자료에서의 순차 검색의 평균 비교 회수
# (1 / n) * (1 + 2 + 3 + ... + n) = (n + 1) / 2
# 시간복잡도 : O(n)
"""
구현 예
def sequentialSearch(a, n, key)
    i <- 0
    while i < n and a[i]! = key:
        i <- i + 1
    if i < n : return i
    else : return -1
"""


# 정렬되어 있는 경우
# 검색 과정
# 자료가 오름차순으로 정렬된 상태에서 검색을 실시한다고 가정하자
# 자료를 순차적으로 검색하면서 키 값을 비교하여, 원소의 키 값이 검색 대상의 키 값보다 크면 찾는 원소가 없다는 것이므로
# 더 이상 검색하지 않고 검색을 종료한다


# 이진 검색(Binary Search)

# 자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행하는 방법
# 목적 키를 찾을 때까지 이진 검색을 순환적으로 반복 수행함으로써 검색 범위를 반으로 줄여가면서 보다 빠르게 검색을 수행함

# 이진 검색을 하기 위해서는 자료가 정렬된 샅애여야 한다


# 검색 과정
# 1. 자료의 중앙에 있는 원소를 고른다
# 2. 중앙 원소의 값과 찾고자 하는 목표 값을 비교한다
# 3. 목표 값이 중앙 원소의 값보다 작으면 자료의 왼쪽 반에 대해서 새로 검색을 수행하고,
# 크다면 자료의 오른쪽 반에 대해서 새로 검색을 수행한다
# 찾고자 하는 값을 찾을 때까지 1~3의 과정을 반복한다.

"""
2 4 7 9 11 19 23

<검색 과정>
1) 20 > 9 => 왼쪽 검색
2) 20 > 19 => 오른쪽 검색
3) 23 != 20 => 검색 실패
"""

# 구현
# 검색 범위의 시작점과 종료점을 이용하여 검색을 반복 수행한다
# 이진 검색의 경우 자료에 삽입이나 삭제가 발생했을 때 배열의 상태를 항상 정렬 상태로 유지하는 추가 작업이 필요하다

# 중앙값 (start + end) // 2  (인덱스)

# 자료가 항상 정렬 되어 있어야 한다

def binarySearch(a, N, key):
    start = 0
    end = N - 1
    while start <= end:
        middle = (start + end) // 2
        if a[middle] == key : # 검색 성공
            return True
        elif a[middle] > key:
            end = middle - 1
        else:
            start = middle + 1
    return False # 검색 실패

# 선택 정렬(Selection Sort)

# 주어진 자료들 중 가장 작은 값의 원소부터 차례대로 선택하여 위치를 교환하는 방식
# 앞서 살펴본 셀렉션 알고리즘을 전체 자료에 적용한 것이다

# 정렬 과정
# 주어진 리스트 중에서 최소값을 찾는다
# 그 값을 리스트의 맨 앞에 위치한 값과 교환한다
# 맨 처음 위치를 제외한 나머지 리스트를 대상으로 위의 과정을 반복한다

# 시간 복잡다
# O(n ** 2)

# 정렬 과정
# 1) 주어진 리스트에서 최소값을 찾는다
# 2) 리스트의 맨 앞에 위치한 값과 교환한다
# 3) 미정렬 리스트에서 최소값을 찾는다 (기준위치 변경)
# 4) 리스트의 맨 앞에 위치한 값과 교환한다
# 5) 미정렬 리스트에서 최소값을 찾는다
# 6) 리스트의 맨앞에 위치한 값과 교환한다
# 7) 미정렬 리스트에서 최소값을 찾는다
# 8) 리스트의 맨앞에 위치한 값과 교환한다
# 미정렬원소가 하나 남은 상황에서 마지막 원소가 가장 큰 값을 갖게 되므로, 실행을 종료하고 선택 정렬이 완료된다.

# 선택 정렬
def selectionSort(a, N):
    for i in range(N - 1):
        minIdx = i
        for j in range(i + 1, N):
            if a[minIdx] > a[j]:
                minIdx = j
        a[i], a[minIdx] = a[minIdx], a[i]

# 저장되어 있는 자료로부터 k번째로 큰 혹은 작은 원소를 찾는 방법을 셀렉션 알고리즘이라 한다
# 최소값, 최대값 혹은 중간값을 찾는 알고리즘을 의미하기도 한다.

# 선택 과정
# 셀렉션은 아래와 같은 과정을 통해 이루어진다
# 정렬 알고리즘을 이용하여 자료 정렬하기
# 원하는 순서에 있는 원소 가져오기
# O(n ** 2)

# 아래는 k번째로 작은 원소를 찾는 알고리즘
# 1번부터 k번째까지 작은 원소들을 찾아 배열의 앞쪽으로 이동시키고, 배열의 k번째를 반환한다.
# k가 비교적 작을 때 유용하며 O(kn)의 수행시간을 필요로 한다

def select(arr, k):
    for i in range(0, k):
        minIdx = i
        for j in range(i + 1, len(arr)):
            if arr[minIdx] > arr[j]:
                minIdx = j
        arr[i], arr[minIdx] = arr[minIdx], arr[i]

    return arr[k - 1]