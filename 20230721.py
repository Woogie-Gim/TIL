# 전문용어 이해하기

# 서버와 클라이언트
# 서버 : 부탁을 받으면 처리해주거나 부탁대로 원하는 값을 돌려주는 역할
# 클라이언트 : 부탁하는 역할

# 클라이언트 -> 데이터 요구 -> 서버
# 서버 -> 데이터 제공 -> 클라이언트

# 네이버 같은 경우 크롬이라는 클라이언트가 네이버 서버에 메인화면을 요청하고 메인화면을 돌려줌

# 클라이언트가 요청을 보내는 방법
# 웹브라우저를 켜서 주소창에 주소를 입력한다
# 서버에 정보를 요청하는 파이썬 코드 작성 (requests)


# pip install requests 터미널에 입력
# pip : 파이썬 패키지 관리 도구

import requests

url = 'https://fakestoreapi.com/carts'
response = requests.get(url)

print(response.json())

# requests.get(url) : 해당 서버(url)에 데이터를 달라고 요청을 보내는 함수

# .json()
# 내부의 데이터를 JSON(파이썬의 딕셔너리와 비슷함) 형태로 변환해주는 함수

# 서버는 어떻게 요청을 해석할까

# 클라이언트들은 각자 다른 방식으로 용청을 보냄

# API
# 클라이언트가 원하는 기능을 수행하기 위해서 서버 측에 만들어 놓은 프로그램
# 기능 예시 : 데이터 저장, 조회, 수정 삭제 등등

# 서버 측에 특정 주소로 요청이 오면 정해진 기능을 수행하는 API를 미리 만들어둠
# 클라이언트는 서버가 미리 만들어 놓은 주소로 요청을 보냄

# 오픈 API
# 외부에서 사용할 수 있도록 무료로 개방된 API
# 사용법은 공식문서(Docs)에 명시되어 있다.

# 프로젝트에서 사용되는 API
# OpenWeaterMap API
# 금융상품통합비교공시 API

# 오픈 API 특징 및 주의사항
# 너무 많은 계정에서 동시에 요청을 보내면 서버가 견디기 힘듦

# 이러한 문제점을 해결하기 위해 오픈 API는 'API KEY'를 활용하여 사용자를 확인
# 사용자 인증 혹은 회원가입을 하면 서버에서 API KEY를 발급
# 서버에 요청할 때 마다 해당 API KEY를 함께 보내 정상적인 사용자 인 것을 확인 받는다

# 일부 오픈 API는 '사용량이 제한' 되어 있다
# 공식문서의 일일 및 월간 사용량 제한을 반드시 확인해야 한다
# [주의] 사용량이 초과될 경우 요금이 추가될 수 있음

# JSON
# API 가 사용하는 데이터 형식 - JSON
# JavaScript Object Notation의 약자. 직역하면 '자바스크립트 객체 표기법'
# 데이터를 저장하거나 전송할 때 많이 사용되는 '경량의 텍스트 기반의 데이터 형식'
# 통신 방법이나 프로그래밍 문법이 아니라 단순히 데이터를 표현하는 표현 방법 중 하나
# 특징
# 데이터는 중괄호({})로 둘러싸인 키 - 값 쌍의 집합으로 표현됨
# 값이 여러개가 있다면 [] 로 묶임
# 키 = 문자열 / 값 = 다양한 데이터 유형을 가질 수 있다
# 값은 쉼표(,)로 구분됨

import json # 내장 라이브러리 (모듈)

# json 데이터
json_data = '''
{
    "name": "김싸피",
    "age": 28,
    "hobbies": [
        "공부하기",
        "복습하기"
    ]
}
'''

data = json.loads(json_data)
print(type(data))

# JSON 데이터에서 원하는 데이터만 가져오기
name = data.get('name')

print(name)

# 참고
# 파싱(Parsing) : 데이터를 의미 있는 구조로 분석하고 해석하는 과정
# 원하는 형태로 변환하는 것도 일반적으로 파싱이라고 부름
# json.loads() : JSON 형식의 문자열을 파싱하여 python Dictionary로 변환

# Openweathermap API

# f768fe01fe3837a4e165b4bbc46c3a89
