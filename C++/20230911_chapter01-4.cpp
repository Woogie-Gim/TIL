/*Chapter 01-4 인라인 함수*/

/*
매크로 함수의 장점과 함수의 inline 선언

#define SQUARE(x) ((x)*(x)) -> 이러한 형태를 보면 바꿔라 선행처리
int main(void)
{
	std::cout<<SQUARE(5)<<std::endl;
	return0;
}

=> 선행처리 결과
int main(void)
{
	std::cout<< ((5)*(5)) <<std::endl;
	return 0;
}

장점. 함수가 인라인화 되어 성능의 향상으로 이어질 수 있다.
어떠한 함수가 호출될 때 스택이 할당되기 때문에 성능의 향상으로 이어질 수 있다.
단점. 함수의 정의 방식이 일반함수에 비해서 복잡하다. 따라서 복잡한 함수의 정의에는 한계가 있다.
또한 디버깅이 어렵다


인라인 함수
inline int SQUARE(int x)
{
	return x*x;
}
int main(void)
{
	std::cout<<SQUARE(5)<<std::endl;
	std::cout<<SQUARE(12)<<std::endl;
	return 0;
}

키워드 inline 선언은 컴파일러에 의해서 처리된다. 따라서 컴파일러가 함수의 인라인화를 결정한다.
inline 선언이 되어도 인라인 처리 되지 않을 수 있고, inline 선언이 없어도 인라인 처리 될 수 있다.

컴파일러에게 inline으로 정의하는게 어떻겠니? 하고 제시를 해주고
컴파일러가 타당하다고 생각한다면 inline함수를 사용하고 타당하지 않다고 판단한다면 생략될 수 있다.

인라인 함수에는 없는 매크로 함수만의 장점

매크로 함수는 자료형에 독립적이다.
inline 선언된 함수를 위의 형태로 호출하려면, 각 자료형 별로 함수가 오버로딩 되어야 한다.
즉, 매크로 함수와 달리 자료형에 독립적이지 못하다.
inline 함수를 자료형에서 독립적으로 선언하는 방법! 이는 이후에 템플릿을 통해서 학습하게 된다.
*/